name: üöÄ Deploy to GitHub Pages

on:
  # Trigger on push to main branch
  push:
    branches: [main]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options: [production, staging]
      force_rebuild:
        description: 'Force rebuild all pages'
        required: false
        default: false
        type: boolean

  # Trigger on release
  release:
    types: [published]

# No concurrency at workflow level to avoid deadlocks

jobs:
  # Validate documentation
  validate-docs:
    name: üìã Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Check documentation structure
        run: |
          echo "üîç Validating documentation structure..."
          
          # Check if required files exist
          required_files=(
            "docs/index.md"
            "docs/architecture.md"
            "docs/components.md"
            "docs/self-healing.md"
            "docs/chaos-engineering.md"
            "docs/ci-cd.md"
            "docs/screenshots.md"
            "docs/links.md"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          echo "‚úÖ All required documentation files present"

      - name: üîó Validate internal links
        run: |
          echo "üîó Checking internal links..."
          
          # Find all markdown files
          find docs/ -name "*.md" -type f | while read -r file; do
            echo "üìÑ Checking links in: $file"
            
            # Extract internal links and check if they exist
            grep -o '\[.*\]([^)]*\.md)' "$file" | sed 's/.*(\(.*\))/\1/' | while read -r link; do
              # Skip if link is empty
              if [[ -z "$link" ]]; then
                continue
              fi
              
              # Check if file exists
              if [[ ! -f "docs/$link" ]]; then
                echo "‚ùå Broken link in $file: $link"
                exit 1
              else
                echo "‚úÖ Link OK: $link"
              fi
            done
          done
          
          echo "‚úÖ All internal links validated"

      - name: üìä Generate documentation stats
        run: |
          echo "üìä Generating documentation statistics..."
          
          # Count files and lines
          total_files=$(find docs/ -name "*.md" | wc -l)
          total_lines=$(find docs/ -name "*.md" -exec wc -l {} + | tail -1 | awk '{print $1}')
          
          echo "üìà Documentation Statistics:" >> docs-stats.md
          echo "- Total files: $total_files" >> docs-stats.md
          echo "- Total lines: $total_lines" >> docs-stats.md
          echo "- Generated: $(date)" >> docs-stats.md
          
          echo "‚úÖ Documentation stats generated"

      - name: üì§ Upload validation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-validation
          path: docs-stats.md
          retention-days: 30

  # Build and optimize documentation
  build-docs:
    name: üèóÔ∏è Build Documentation
    runs-on: ubuntu-latest
    needs: validate-docs
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: üì¶ Install documentation tools
        run: |
          echo "üì¶ Installing documentation tools..."
          pip install beautifulsoup4
          pip install requests
          pip install markdown
          pip install pyyaml

      - name: üîß Optimize markdown files
        run: |
          echo "üîß Optimizing markdown files..."
          
          # Process each markdown file
          find docs/ -name "*.md" -type f | while read -r file; do
            echo "üìÑ Optimizing: $file"
            
            # Add metadata if not present
            if ! grep -q "^---" "$file"; then
              # Create temporary file with metadata
              temp_file=$(mktemp)
              echo "---" > "$temp_file"
              echo "title: $(basename "$file" .md | sed 's/-/ /g' | sed 's/\b\w/\U&/g')" >> "$temp_file"
              echo "last_updated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "$temp_file"
              echo "---" >> "$temp_file"
              echo "" >> "$temp_file"
              cat "$file" >> "$temp_file"
              mv "$temp_file" "$file"
            fi
          done
          
          echo "‚úÖ Markdown files optimized"

      - name: üñºÔ∏è Generate placeholder images
        run: |
          echo "üñºÔ∏è Generating placeholder images..."
          
          # Create images directory if it doesn't exist
          mkdir -p docs/images
          
          # Generate placeholder images for screenshots
          cat > docs/images/placeholder.svg << 'EOF'
          <svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="#f0f0f0"/>
            <text x="50%" y="50%" font-family="Arial" font-size="24" text-anchor="middle" fill="#666">
              Screenshot Placeholder
            </text>
            <text x="50%" y="70%" font-family="Arial" font-size="16" text-anchor="middle" fill="#999">
              Add actual screenshot here
            </text>
          </svg>
          EOF
          
          echo "‚úÖ Placeholder images generated"

      - name: üìù Generate sitemap
        run: |
          echo "üìù Generating sitemap..."
          
          cat > docs/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
          EOF
          
          # Add URLs for each markdown file
          find docs/ -name "*.md" -type f | while read -r file; do
            if [[ "$file" != "docs/index.md" ]]; then
              page_name=$(basename "$file" .md)
              echo "  <url>" >> docs/sitemap.xml
              echo "    <loc>https://justrunme.github.io/self-healing-infrastructure-chaos-engineering/$page_name/</loc>" >> docs/sitemap.xml
              echo "    <lastmod>$(date -u +"%Y-%m-%dT%H:%M:%SZ")</lastmod>" >> docs/sitemap.xml
              echo "    <changefreq>weekly</changefreq>" >> docs/sitemap.xml
              echo "    <priority>0.8</priority>" >> docs/sitemap.xml
              echo "  </url>" >> docs/sitemap.xml
            fi
          done
          
          echo "</urlset>" >> docs/sitemap.xml
          
          echo "‚úÖ Sitemap generated"

      - name: üîç SEO optimization
        run: |
          echo "üîç Optimizing for SEO..."
          
          # Add meta tags to index.md if not already present
          if [[ -f "docs/index.md" ]]; then
            # Check if SEO metadata already exists
            if ! grep -q "og_title" docs/index.md; then
              # Create SEO-optimized version
              temp_file=$(mktemp)
              cat > "$temp_file" << 'EOF'
          ---
          title: "Self-Healing Infrastructure with Chaos Engineering"
          description: "A comprehensive Kubernetes-based self-healing infrastructure that automatically detects and recovers from failures, with integrated monitoring, chaos engineering, and automated node management."
          keywords: "kubernetes, self-healing, chaos engineering, devops, sre, monitoring, prometheus, grafana"
          author: "justrunme"
          robots: "index, follow"
          og_title: "Self-Healing Infrastructure with Chaos Engineering"
          og_description: "Automated Kubernetes infrastructure with self-healing capabilities and chaos engineering"
          og_type: "website"
          og_url: "https://justrunme.github.io/self-healing-infrastructure-chaos-engineering/"
          twitter_card: "summary_large_image"
          ---
          EOF
              tail -n +2 docs/index.md >> "$temp_file"
              mv "$temp_file" docs/index.md
              echo "‚úÖ SEO metadata added to index.md"
            else
              echo "‚úÖ SEO metadata already present in index.md"
            fi
          fi
          
          echo "‚úÖ SEO optimization completed"

  # Deploy to GitHub Pages
  deploy:
    name: üöÄ Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [validate-docs, build-docs]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    # No concurrency to avoid deadlocks
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üê≥ Setup Pages
        uses: actions/configure-pages@v4

      - name: üì¶ Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üìä Post-deployment checks
        run: |
          echo "üìä Running post-deployment checks..."
          
          # Wait for deployment to be available
          sleep 30
          
          # Check if site is accessible
          site_url="${{ steps.deployment.outputs.page_url }}"
          echo "üåê Checking site availability: $site_url"
          
          # Test main page
          if curl -f -s "$site_url" > /dev/null; then
            echo "‚úÖ Main page is accessible"
          else
            echo "‚ùå Main page is not accessible"
            exit 1
          fi
          
          # Test sitemap
          if curl -f -s "$site_url/sitemap.xml" > /dev/null; then
            echo "‚úÖ Sitemap is accessible"
          else
            echo "‚ùå Sitemap is not accessible"
            exit 1
          fi
          
          echo "‚úÖ All post-deployment checks passed"

      - name: üîî Send deployment notification
        if: success()
        run: |
          echo "üîî Sending deployment notification..."
          
          # Create deployment summary
          cat > deployment-summary.md << EOF
          ## üöÄ GitHub Pages Deployment Successful!
          
          **Site URL:** ${{ steps.deployment.outputs.page_url }}
          **Deployment Time:** $(date -u)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ### üìä Deployment Summary
          - ‚úÖ Documentation validation passed
          - ‚úÖ Build optimization completed
          - ‚úÖ SEO optimization applied
          - ‚úÖ Sitemap generated
          - ‚úÖ Site accessibility verified
          
          ### üîó Quick Links
          - [Main Page](${{ steps.deployment.outputs.page_url }})
          - [Architecture](${{ steps.deployment.outputs.page_url }}architecture/)
          - [Components](${{ steps.deployment.outputs.page_url }}components/)
          - [Self-Healing](${{ steps.deployment.outputs.page_url }}self-healing/)
          - [Chaos Engineering](${{ steps.deployment.outputs.page_url }}chaos-engineering/)
          - [CI/CD Pipeline](${{ steps.deployment.outputs.page_url }}ci-cd/)
          - [Screenshots](${{ steps.deployment.outputs.page_url }}screenshots/)
          - [Links](${{ steps.deployment.outputs.page_url }}links/)
          
          ---
          *Deployed by GitHub Actions*
          EOF
          
          echo "‚úÖ Deployment notification prepared"

      - name: üì§ Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 30

  # Performance testing
  performance-test:
    name: ‚ö° Performance Test
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: üì¶ Install performance testing tools
        run: |
          echo "üì¶ Installing performance testing tools..."
          pip install requests
          pip install beautifulsoup4
          pip install lxml

      - name: ‚ö° Run performance tests
        run: |
          echo "‚ö° Running performance tests..."
          
          # Get the site URL from the deployment step
          site_url="${{ needs.deploy.outputs.page_url }}"
          
          # If URL is empty, use default GitHub Pages URL
          if [[ -z "$site_url" ]]; then
            site_url="https://justrunme.github.io/self-healing-infrastructure-chaos-engineering/"
            echo "‚ö†Ô∏è  Using default URL: $site_url"
          fi
          
          echo "üåê Testing site: $site_url"
          
          # Test page load times
          python3 << EOF
          import requests
          import time
          import sys
          
          site_url = "$site_url"
          
          print(f"Testing site performance: {site_url}")
          
          try:
              # Test main page
              start_time = time.time()
              response = requests.get(site_url, timeout=30)
              load_time = time.time() - start_time
              
              print(f"Main page load time: {load_time:.2f} seconds")
              print(f"Status code: {response.status_code}")
              print(f"Content length: {len(response.content)} bytes")
              
              if load_time > 5:
                  print("‚ö†Ô∏è  Warning: Page load time is slow")
              else:
                  print("‚úÖ Page load time is acceptable")
              
              # Test other pages
              pages = ['architecture', 'components', 'self-healing', 'chaos-engineering', 'ci-cd']
              
              for page in pages:
                  page_url = f"{site_url}{page}/"
                  start_time = time.time()
                  response = requests.get(page_url, timeout=30)
                  load_time = time.time() - start_time
                  
                  print(f"{page} page load time: {load_time:.2f} seconds")
                  
                  if load_time > 5:
                      print(f"‚ö†Ô∏è  Warning: {page} page load time is slow")
                  else:
                      print(f"‚úÖ {page} page load time is acceptable")
                      
          except Exception as e:
              print(f"‚ùå Error during performance testing: {e}")
              print("‚ö†Ô∏è  Performance test failed, but continuing...")
              sys.exit(0)  # Don't fail the workflow
          EOF
          
          echo "‚úÖ Performance tests completed"

  # Security scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [validate-docs, build-docs]
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run security scan
        run: |
          echo "üîí Running security scan..."
          
          # Check for sensitive information in documentation
          echo "üîç Checking for sensitive information..."
          
          # Look for potential secrets
          if grep -r -i "password\|secret\|key\|token" docs/ --exclude="*.md" | grep -v "placeholder\|example"; then
              echo "‚ö†Ô∏è  Warning: Potential sensitive information found"
          else
              echo "‚úÖ No sensitive information found"
          fi
          
          # Check for external links
          echo "üîó Checking external links..."
          find docs/ -name "*.md" -exec grep -o 'https://[^)]*' {} \; | sort | uniq > external_links.txt
          
          echo "External links found:"
          cat external_links.txt
          
          echo "‚úÖ Security scan completed"

      - name: üì§ Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: external_links.txt
          retention-days: 30

  # Final summary
  summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-docs, build-docs, deploy, performance-test, security-scan]
    if: always()
    steps:
      - name: üìä Generate deployment summary
        run: |
          echo "üìä Generating final deployment summary..."
          
          # Get deployment status and URL
          deploy_status="${{ needs.deploy.result }}"
          site_url="${{ needs.deploy.outputs.page_url }}"
          
          # If URL is empty, use default
          if [[ -z "$site_url" ]]; then
            site_url="https://justrunme.github.io/self-healing-infrastructure-chaos-engineering/"
          fi
          
          cat > final-summary.md << EOF
          # üöÄ GitHub Pages Deployment Summary
          
          **Deployment Status:** $deploy_status
          **Site URL:** $site_url
          **Deployment Time:** $(date -u)
          
          ## üìã Job Results
          - **Validate Docs:** ${{ needs.validate-docs.result }}
          - **Build Docs:** ${{ needs.build-docs.result }}
          - **Deploy:** $deploy_status
          - **Performance Test:** ${{ needs.performance-test.result }}
          - **Security Scan:** ${{ needs.security-scan.result }}
          
          ## üéØ Next Steps
          1. Visit your site: $site_url
          2. Test all navigation links
          3. Add actual screenshots to docs/images/
          4. Consider adding a custom domain
          5. Set up Google Analytics (optional)
          
          ## üîß Customization Options
          - Add custom CSS for branding
          - Configure Google Analytics
          - Set up custom domain
          - Add search functionality
          - Enable comments (optional)
          
          ---
          *Generated by GitHub Actions*
          EOF
          
          echo "‚úÖ Final summary generated"

      - name: üì§ Upload final summary
        uses: actions/upload-artifact@v4
        with:
          name: final-summary
          path: final-summary.md
          retention-days: 90

      - name: üéâ Deployment complete
        if: success()
        run: |
          echo "üéâ GitHub Pages deployment completed successfully!"
          echo "üåê Your site is live at: ${{ needs.deploy.outputs.page_url }}"
          echo "üìä Check the artifacts for detailed reports" 